.TH "Voiture" 3 "Tue Dec 13 2022" "Gestionnaire de parkings intelligents" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Voiture
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBVoiture\fP (\fBUtilisateur\fP User)"
.br
.ti -1c
.RI "int \fBextractIntFromString\fP (string aString) const"
.br
.ti -1c
.RI "void \fBMoveRight\fP ()"
.br
.RI "Déplace la voiture vers la droite\&. "
.ti -1c
.RI "void \fBMoveLeft\fP ()"
.br
.RI "Déplace la voiture vers la gauche\&. "
.ti -1c
.RI "void \fBMoveUp\fP ()"
.br
.RI "Déplace la voiture vers le haut\&. "
.ti -1c
.RI "void \fBMoveDown\fP ()"
.br
.RI "Déplace la voiture vers le bas\&. "
.ti -1c
.RI "bool \fBMoveToTargetPosition\fP ()"
.br
.RI "Déplace la voiture vers la position de la cible (parking / place / sortie) "
.ti -1c
.RI "void \fBdeleteNode\fP ()"
.br
.ti -1c
.RI "\fBMessage\fP \fBmanagingConversation\fP (\fBMessage\fP *aMessage) const"
.br
.RI "La voiture lit le message reçu (donné en paramètre) s'il y en a un\&. "
.ti -1c
.RI "\fBMessage\fP \fBconfirmConversation\fP (\fBMessage\fP *aMessage, int indPrOK) const"
.br
.ti -1c
.RI "void \fBincrementNbFinishedConv\fP ()"
.br
.RI "incrémente le nombre de conversations finies de 1\&. "
.ti -1c
.RI "void \fBsetTargetPosition\fP (\fBVec2\fP new_pos)"
.br
.RI "Modifie la position de la cible (parking / place / sortie) "
.ti -1c
.RI "void \fBsetAngle\fP (int new_angle)"
.br
.RI "Modifie l'angle de la voiture\&. "
.ti -1c
.RI "const \fBVec2\fP & \fBgetTargetPosition\fP () const"
.br
.RI "Renvoie la position de la cible (parking / place / sortie) "
.ti -1c
.RI "const \fBVec2\fP & \fBget_position\fP () const"
.br
.RI "Renvoie la position de la voiture\&. "
.ti -1c
.RI "const int & \fBgetAngle\fP () const"
.br
.RI "Renvoie l'angle de la voiture\&. "
.ti -1c
.RI "void \fBset_position\fP (\fBVec2\fP new_pos)"
.br
.RI "Modifie la position de la voiture\&. "
.ti -1c
.RI "bool \fBisPriceOk\fP (double price, \fBUtilisateur\fP User) const"
.br
.RI "vérifie qu'un prix donné est acceptable ou non, avec une marge arbitraire\&. Renvoie un booléen\&. "
.ti -1c
.RI "void \fBUserGetInfos\fP ()"
.br
.RI "Affiche les Infos du conducteur\&. "
.ti -1c
.RI "const float & \fBgetSpeed\fP () const"
.br
.RI "renvoie la vitesse de la voiture "
.ti -1c
.RI "const int & \fBgetNbFinishedConv\fP () const"
.br
.ti -1c
.RI "void \fBsetSpeed\fP (float new_speed)"
.br
.RI "Modifie la vitesse de la voiture\&. "
.ti -1c
.RI "const bool & \fBgetIs_in\fP () const"
.br
.ti -1c
.RI "void \fBsetIs_in\fP (bool new_Is_in)"
.br
.ti -1c
.RI "void \fBsetIs_parked\fP (bool new_Is_parked)"
.br
.ti -1c
.RI "const bool & \fBgetIs_parked\fP () const"
.br
.ti -1c
.RI "void \fBsetIs_pathfind\fP (bool new_Is_pathfind)"
.br
.ti -1c
.RI "const bool & \fBgetIs_pathfind\fP () const"
.br
.ti -1c
.RI "void \fBsetParking\fP (int new_parking)"
.br
.ti -1c
.RI "const int & \fBgetParking\fP () const"
.br
.ti -1c
.RI "void \fBsetPlace\fP (int new_place)"
.br
.ti -1c
.RI "const int & \fBgetPlace\fP () const"
.br
.ti -1c
.RI "void \fBsetwidth\fP (int new_width)"
.br
.ti -1c
.RI "const int & \fBgetwidth\fP () const"
.br
.ti -1c
.RI "void \fBsetheight\fP (int new_height)"
.br
.ti -1c
.RI "const int & \fBgetheight\fP () const"
.br
.ti -1c
.RI "vector< \fBNode\fP * > & \fBgetpathTab\fP ()"
.br
.ti -1c
.RI "float \fBbestPrice\fP (vector< float > tabPrice)"
.br
.ti -1c
.RI "void \fBtest_regresion\fP ()"
.br
.RI "Test de regression la classe \fBVoiture\fP\&. "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "vector< \fBNode\fP * > \fBnodes\fP"
.br
.ti -1c
.RI "\fBUtilisateur\fP \fBUser\fP"
.br
.ti -1c
.RI "int \fBindice\fP"
.br
.ti -1c
.RI "bool \fBisMoving\fP = false"
.br
.ti -1c
.RI "bool \fBderement\fP = true"
.br
.ti -1c
.RI "bool \fBreachGoal\fP = false"
.br
.ti -1c
.RI "float \fBtimer\fP"
.br
.ti -1c
.RI "float \fBstartTimer\fP"
.br
.ti -1c
.RI "bool \fBChangeTrajToExit\fP = false"
.br
.ti -1c
.RI "unsigned int \fBExit\fP"
.br
.ti -1c
.RI "unsigned int \fBCarColor\fP"
.br
.in -1c
.SH "Member Function Documentation"
.PP 
.SS "bool Voiture::isPriceOk (double price, \fBUtilisateur\fP User) const"

.PP
vérifie qu'un prix donné est acceptable ou non, avec une marge arbitraire\&. Renvoie un booléen\&. 
.PP
\fBParameters\fP
.RS 4
\fIprice\fP prix à vérifier 
.RE
.PP

.SS "\fBMessage\fP Voiture::managingConversation (\fBMessage\fP * aMessage) const"

.PP
La voiture lit le message reçu (donné en paramètre) s'il y en a un\&. (s'il n'y en a pas, le pointeur est nul),
.PP
et en crée un nouveau (s'il s'agit d'une réponse, les données du nouveau
.PP
message sont initialisées en fonction des données contenues dans le message reçu)\&.
.PP
Types de message générable :
.PP
.IP "\(bu" 2
CALL
.IP "\(bu" 2
COUNTER_OFFER
.IP "\(bu" 2
LAST_OFFER
.IP "\(bu" 2
ACCEPT
.IP "\(bu" 2
REJECT
.PP
.PP
Types de message reçu pris en compte :
.PP
.IP "\(bu" 2
OFFER
.IP "\(bu" 2
COUNTER_OFFER
.IP "\(bu" 2
LAST_OFFER
.IP "\(bu" 2
ACCEPT
.IP "\(bu" 2
REJECT 
.PP

.SS "bool Voiture::MoveToTargetPosition ()"

.PP
Déplace la voiture vers la position de la cible (parking / place / sortie) 
.PP
\fBReturns\fP
.RS 4
true si la voiture est arrivée à la position de la cible (parking / place / sortie) 
.RE
.PP

.SS "void Voiture::set_position (\fBVec2\fP new_pos)"

.PP
Modifie la position de la voiture\&. 
.PP
\fBParameters\fP
.RS 4
\fInew_pos\fP nouvelle position de la voiture 
.RE
.PP

.SS "void Voiture::setAngle (int new_angle)"

.PP
Modifie l'angle de la voiture\&. 
.PP
\fBParameters\fP
.RS 4
\fInew_angle\fP : nouvel angle de la voiture 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Gestionnaire de parkings intelligents from the source code\&.
